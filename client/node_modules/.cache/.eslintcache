[{"/Users/devin/Code/soapopera/client/src/index.js":"1","/Users/devin/Code/soapopera/client/src/App.js":"2","/Users/devin/Code/soapopera/client/src/reportWebVitals.js":"3","/Users/devin/Code/soapopera/client/src/Player.js":"4","/Users/devin/Code/soapopera/client/src/Dashboard.js":"5","/Users/devin/Code/soapopera/client/src/Login.js":"6","/Users/devin/Code/soapopera/client/src/useAuth.js":"7"},{"size":760,"mtime":1682255973915,"results":"8","hashOfConfig":"9"},{"size":8729,"mtime":1682561949226,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1682255973915,"results":"11","hashOfConfig":"9"},{"size":507,"mtime":1682562012073,"results":"12","hashOfConfig":"9"},{"size":307,"mtime":1682562167652,"results":"13","hashOfConfig":"9"},{"size":931,"mtime":1682533105235,"results":"14","hashOfConfig":"9"},{"size":1603,"mtime":1682560952279,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"35mmhf",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/Users/devin/Code/soapopera/client/src/index.js",[],[],"/Users/devin/Code/soapopera/client/src/App.js",["39","40","41","42","43","44","45","46","47","48","49","50","51","52"],[],"import {useEffect, useState} from \"react\";\nimport './App.css';\nimport axios from 'axios';\nimport SpotifyPlayer from \"./Player\";\nimport Login from \"./Login\";\nimport Dashboard from \"./Dashboard\";\n// hi\nfunction App() {\n    const CLIENT_ID = \"11e1a8a6d9664d7f9eefd2e7de958a15\"\n    const REDIRECT_URI = \"http://localhost:3000\"\n    // const REDIRECT_URI = \"https://soapopera.herokuapp.com/\"\n    const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize?client_id=11e1a8a6d9664d7f9eefd2e7de958a15&redirect_uri=http://localhost:3001&scope=user-read-email%20user-read-private%20streaming&response_type=token\"\n    const RESPONSE_TYPE = \"token\"\n    const [isModalOpen, setIsModalOpen] = useState(false)\n    const [token, setToken] = useState(\"\")\n    const [searchKey, setSearchKey] = useState(\"\")\n    const [artists, setArtists] = useState([])\n    const [playlists, setPlaylists] = useState([])\n    const [selectedPlaylist, setSelectedPlaylist] = useState(null)\n    const [playlistTracks, setPlaylistTracks] = useState([])\n    const [userTracks, setUserTracks] = useState([])\n    // const spotifyPlayer = window.spotifyPlayer;\n    // const [spotifyPlayer, setSpotifyPlayer] = useState(null);\n\n    const code = new URLSearchParams(window.location.search).get(\"code\")\n\n\n\n    useEffect(() => {\n        const getPlaylists = async () => {\n            try {\n                const {data} = await axios.get(\"https://api.spotify.com/v1/me/playlists\", {\n                    headers: {\n                        Authorization: `Bearer ${token}`\n                    },\n                })\n                setPlaylists(data.items)\n            } catch (e) {\n                console.error(e)\n            }\n        }\n\n        if (token) {\n            getPlaylists();\n        }\n        }, [token]\n    )\n\n    const logout = () => {\n        setToken(\"\")\n        window.localStorage.removeItem(\"token\")\n    }\n\n    const openModal = () => {\n      setIsModalOpen(true);\n    }\n\n    const handlePlaylistClick = async (playlist) => {\n        setSelectedPlaylist(playlist)\n        try {\n            const {data} = \n                await axios.get(`https://api.spotify.com/v1/playlists/${playlist.id}/tracks`, {\n                headers: {Authorization: `Bearer ${token}`},})\n            setPlaylistTracks(data.items)\n            openModal()\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    const closeModal = () => {\n      setIsModalOpen(false);\n    }\n\n    const renderPlaylists = () => {\n      return playlists.map((playlist) => (\n        <div\n          key={playlist.id}\n          className=\"playlist-item-container\"\n          onClick={() => handlePlaylistClick(playlist)}\n        >\n          {playlist.images.length ? (\n            <img\n              className=\"playlist-image rounded-md\"\n              width={200}\n              src={playlist.images[0].url}\n              alt=\"\"\n            />\n          ) : (\n            <div>No Image</div>\n          )}\n          <span className=\"playlist-name\">{playlist.name}</span>\n        </div>\n      ));\n    };\n\n    const renderUserTracks = () => {\n        return userTracks.map(userTracks => (\n            <div className = \"\" key={userTracks.id} onClick={() => handlePlaylistClick(userTracks)}>\n            {userTracks.name}\n        </div>\n    ))\n    }\n\n    const renderusertracks = () => {\n        return userTracks.map(track => {\n            <div key={track.track.id}>\n    {track.track.name} - {track.track.artists.map(artist => artist.name).join(\", \")}\n\n            </div>\n        })\n    }\n\n    //shuffle playlistTracks\n    function shuffle(array) {\n    let currentIndex = array.length,  randomIndex;\n    // While there remain elements to shuffle.\n    while (currentIndex != 0) {\n        // Pick a remaining element.\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n        // And swap it with the current element.\n        [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    return array;\n    }\n\n\n// const initializeSpotifyPlayer = () => {\n//     if (window.Spotify) {\n//       const player = new window.Spotify.Player({\n//         name: \"Soap Opera\",\n//         getOAuthToken: (cb) => {\n//           cb(token);\n//         },\n//       });\n  \n//       player.connect();\n  \n//       player.addListener(\"ready\", ({ device_id }) => {\n//         console.log(\"Ready with Device ID\", device_id);\n//         setSpotifyPlayer(player);\n//       });\n  \n//       player.addListener(\"not_ready\", ({ device_id }) => {\n//         console.log(\"Device ID has gone offline\", device_id);\n//       });\n//     }\n//   };\n\nconst renderPlaylistTracks = () => {\n  let totalDurationInMs = 0;\n  const tracksToRender = [];\n\n  shuffle(playlistTracks);\n\n  for (const track of playlistTracks) {\n    const durationInMs = track.track.duration_ms;\n    const durationInMin = durationInMs / 60000;\n\n    if (totalDurationInMs + durationInMs <= 480000) {\n      tracksToRender.push(track);\n      totalDurationInMs += durationInMs;\n    } else {\n        //do nothing\n    }\n    }\n\n    return tracksToRender.map(track => {\n        const durationInMs = track.track.duration_ms;\n        const durationInMin = durationInMs / 60000;\n        const durationString = durationInMin.toFixed(2) + ' minutes';\n        return (\n        <div key={track.track.id}>\n            {track.track.name} - {durationString} - {track.track.artists.map(artist => artist.name).join(\", \")}\n        </div>\n        // <div key={track.track.id} onClick={() => {\n        //     if (spotifyPlayer) {\n        //         spotifyPlayer._options.getOAuthToken((accessToken) => {\n        //         axios\n        //             .put(\n        //             `https://api.spotify.com/v1/me/player/play?device_id=${spotifyPlayer._options.id}`,\n        //             { uris: [track.track.uri] },\n        //             {\n        //                 headers: {\n        //                 Authorization: `Bearer ${accessToken}`,\n        //                 },\n        //             }\n        //             )\n        //             .catch((error) => console.error(error));\n        //         });\n        //         }\n        //     }}\n        //     >\n        //       {track.track.name} - {durationString} -{\" \"}\n        //       {track.track.artists.map((artist) => artist.name).join(\", \")}\n        //     </div>\n        );\n        });\n    };\n\n    //displays home screen welcome message\n    const WelcomeMessage = () => {\n        return (\n        <div className=\"text-center\">\n            <h1 className=\"text-[#8582d9]  w-full text-center\">Welcome to Soap Opera! </h1>\n            <p className=\"text-center  \" >Don't take too long in the shower! With Soap Opera you pick the playlist and we pick the best songs to limit your water waste</p>\n            <a  className = \"text-center\" href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>Login to Spotify</a>\n        </div>)\n    }\n\n    // displays logout button if logged in\n    const LoggedIn = () => {\n        return (\n        <div className=\"\">\n            <h1 className=\"text-[#8582d9]  text-center\">Soap Opera </h1>\n            <button className = \"\" onClick={logout}>Logout</button>\n        </div>)\n    }\n\n    //Shows playlists and waits for user to click on one\n    const SelectPlaylist = () => {\n        return (\n            <div className=\"text-center\">\n                <h1>Select a Spotify Playlist</h1>\n                <h2>My Playlists:</h2>\n                <div className=\"playlists-grid\">{renderPlaylists()}</div>\n                {selectedPlaylist && (\n                <div>\n                    <h2>{selectedPlaylist.name} Tracks:</h2>\n                    {isModalOpen && (\n                    <div\n                        className=\"fixed inset-0 flex items-center justify-center z-50\"\n                        style={{ backgroundColor: \"rgba(0, 0, 0, 0.5)\" }}>\n                        <div className=\"bg-white p-6 rounded-md max-h-full overflow-y-auto\">\n                            <button \n                                onClick={closeModal} \n                                className=\"float-right\">X</button>\n                            <h2 className=\"text-xl mb-4\">{selectedPlaylist && selectedPlaylist.name} Tracks:</h2>\n                        <div>{renderPlaylistTracks()}</div>\n                        </div>\n                    </div>)}\n                </div>)}\n            </div>)\n    }\n\n    console.log(code)\nreturn (\n    <div className=\"bg-white\">\n        <body className=\"App-header\">\n            {code ? <Dashboard code={code}/> : <Login/>}\n            {/* {token ? SelectPlaylist() : <h2></h2>} */}\n        </body>\n\n\n    </div>\n);\n}\nexport default App;","/Users/devin/Code/soapopera/client/src/reportWebVitals.js",[],[],"/Users/devin/Code/soapopera/client/src/Player.js",[],[],"/Users/devin/Code/soapopera/client/src/Dashboard.js",[],[],"/Users/devin/Code/soapopera/client/src/Login.js",[],[],"/Users/devin/Code/soapopera/client/src/useAuth.js",["53"],[],"import axios from 'axios'\nimport React, { useEffect, useState } from 'react'\n\n\n// handles the authentication\nexport default function useAuth(code) {\n  const [accessToken, set_access_token] = useState()\n  const [refreshToken, set_refresh_token] = useState()\n  const [expiresIn, set_expires_in] = useState()\n\n  // \n  useEffect(() => {\n    axios.post('http://localhost:3001/login', { // sends HTTP POST to /login endpoint\n        code,\n    })\n    .then(res => { // gets response from /login endpoint of the server\n      console.log(\"hiiiiiiiiii\")\n      console.log(res.data)\n      set_access_token(res.data.accessToken)\n      set_refresh_token(res.data.refreshToken)\n      set_expires_in(res.data.expiresIn)\n      window.history.pushState({}, null, \"/\")\n    })\n    .catch(error => {\n      window.location = \"/\"\n      console.error(error)\n    }) \n  }, [code])\n\n\n  useEffect(() => {\n    if (!refreshToken || !expiresIn) return\n    const interval = setInterval(() => {\n      axios\n        .post('http://localhost:3001/refresh', {refreshToken,})\n        .then(res => {\n          console.log(res.data)\n          set_access_token(res.data.accessToken)\n          set_expires_in(res.data.expiresIn)\n        })\n        .catch(error => {\n          console.error(error)\n          window.location = \"/\"\n        })\n      \n    }, (expiresIn - 60) * 1000);\n    return () => clearInterval(interval)\n  \n  }, [refreshToken, expiresIn])\n\n  return accessToken\n}\n\n\n/*\nExplanation:\nIn the server folder, there is currently a server running on port 3001 (or whatever the specified port number is) that listens for a payload.\n*/\n\n",{"ruleId":"54","severity":1,"message":"55","line":4,"column":8,"nodeType":"56","messageId":"57","endLine":4,"endColumn":21},{"ruleId":"54","severity":1,"message":"58","line":16,"column":12,"nodeType":"56","messageId":"57","endLine":16,"endColumn":21},{"ruleId":"54","severity":1,"message":"59","line":16,"column":23,"nodeType":"56","messageId":"57","endLine":16,"endColumn":35},{"ruleId":"54","severity":1,"message":"60","line":17,"column":12,"nodeType":"56","messageId":"57","endLine":17,"endColumn":19},{"ruleId":"54","severity":1,"message":"61","line":17,"column":21,"nodeType":"56","messageId":"57","endLine":17,"endColumn":31},{"ruleId":"54","severity":1,"message":"62","line":21,"column":24,"nodeType":"56","messageId":"57","endLine":21,"endColumn":37},{"ruleId":"54","severity":1,"message":"63","line":97,"column":11,"nodeType":"56","messageId":"57","endLine":97,"endColumn":27},{"ruleId":"54","severity":1,"message":"64","line":105,"column":11,"nodeType":"56","messageId":"57","endLine":105,"endColumn":27},{"ruleId":"65","severity":1,"message":"66","line":106,"column":37,"nodeType":"67","messageId":"68","endLine":106,"endColumn":39},{"ruleId":"69","severity":1,"message":"70","line":118,"column":25,"nodeType":"71","messageId":"72","endLine":118,"endColumn":27},{"ruleId":"54","severity":1,"message":"73","line":160,"column":11,"nodeType":"56","messageId":"57","endLine":160,"endColumn":24},{"ruleId":"54","severity":1,"message":"74","line":204,"column":11,"nodeType":"56","messageId":"57","endLine":204,"endColumn":25},{"ruleId":"54","severity":1,"message":"75","line":214,"column":11,"nodeType":"56","messageId":"57","endLine":214,"endColumn":19},{"ruleId":"54","severity":1,"message":"76","line":223,"column":11,"nodeType":"56","messageId":"57","endLine":223,"endColumn":25},{"ruleId":"54","severity":1,"message":"77","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":13},"no-unused-vars","'SpotifyPlayer' is defined but never used.","Identifier","unusedVar","'searchKey' is assigned a value but never used.","'setSearchKey' is assigned a value but never used.","'artists' is assigned a value but never used.","'setArtists' is assigned a value but never used.","'setUserTracks' is assigned a value but never used.","'renderUserTracks' is assigned a value but never used.","'renderusertracks' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'durationInMin' is assigned a value but never used.","'WelcomeMessage' is assigned a value but never used.","'LoggedIn' is assigned a value but never used.","'SelectPlaylist' is assigned a value but never used.","'React' is defined but never used."]